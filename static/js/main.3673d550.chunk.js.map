{"version":3,"sources":["icons/GitHubIcon.tsx","components/TopBar.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GitHubIcon","SvgIcon","d","withStyles","theme","createStyles","props","AppBar","position","color","Toolbar","Grid","container","spacing","justify","alignItems","direction","item","Typography","variant","children","Tooltip","title","IconButton","target","href","React","useState","inputValue","setInputValue","testValue","setTestValue","i","g","m","regexVariant","setRegexVariant","matchingPattern","setMatchingPattern","handleChange","event","name","checked","useEffect","style","height","width","display","clear","paddingTop","border","float","padding","TextField","id","label","multiline","fullWidth","rows","value","onChange","input","marginTop","marginBottom","Button","component","type","accept","e","f","r","FileReader","onloadend","result","readAsText","setInput","files","onClick","document","createElement","Blob","URL","createObjectURL","download","click","saveToFile","margin","FormControlLabel","control","Switch","inputProps","t","split","preset","Object","keys","filter","k","create","join","length","pattern","RegExp","replace","test","checkRegexes","InputProps","readOnly","DefaultApp","themeBool","setTheme","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3673d550.chunk.js","sourcesContent":["import React from 'react';\n\nimport { SvgIcon } from '@material-ui/core';\n\nfunction GitHubIcon() {\n  return (\n    <SvgIcon>\n      <path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\" />\n    </SvgIcon>\n  );\n}\n\nexport default GitHubIcon;\n","import {\n  AppBar,\n  Toolbar,\n  Grid,\n  Typography,\n  IconButton,\n  Theme,\n  createStyles,\n  WithStyles,\n  withStyles,\n  Tooltip,\n} from '@material-ui/core';\nimport React from 'react';\nimport GitHubIcon from '../icons/GitHubIcon';\n\nconst styles = (theme: Theme) => createStyles({});\n\ninterface IProps extends WithStyles<typeof styles> {\n  children: React.ReactNode;\n}\n\nconst TopBar = (props: IProps) => {\n  return (\n    <AppBar position=\"fixed\" color=\"inherit\">\n      <Toolbar color=\"inherit\">\n        <Grid\n          container\n          spacing={1}\n          justify=\"space-between\"\n          alignItems=\"center\"\n          direction=\"row\"\n        >\n          <Grid item>\n            <Typography color=\"textPrimary\" variant=\"h5\">\n              ECMAScript multiline regex tester\n            </Typography>\n          </Grid>\n          <Grid item>\n            {/* Takes the dark theme toggle here */}\n            {props.children}\n            <Tooltip title=\"GitHub repository\">\n              <IconButton\n                target=\"_blank\"\n                href=\"https://github.com/daftmaple/multiline-regex-tester\"\n              >\n                <GitHubIcon />\n              </IconButton>\n            </Tooltip>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default withStyles(styles)(TopBar);\n","import React from 'react';\nimport {\n  Theme,\n  WithStyles,\n  createStyles,\n  withStyles,\n  Typography,\n  TextField,\n  Button,\n  Switch,\n  FormControlLabel,\n} from '@material-ui/core';\n\nconst styles = (theme: Theme) => createStyles({});\n\ninterface IProps extends WithStyles<typeof styles> {}\n\nconst Main = (props: IProps) => {\n  const [inputValue, setInputValue] = React.useState('');\n  const [testValue, setTestValue] = React.useState('');\n  const [regexVariant, setRegexVariant] = React.useState({\n    i: true,\n    g: true,\n    m: true,\n  });\n  const [matchingPattern, setMatchingPattern] = React.useState('');\n\n  const setInput = (f: File) => {\n    const r = new FileReader();\n    r.onloadend = () => {\n      const i = r.result;\n      if (typeof i === 'string') {\n        setInputValue(i);\n      }\n    };\n    r.readAsText(f);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRegexVariant({\n      ...regexVariant,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const checkRegexes = () => {\n    const t = inputValue.split('\\n');\n    const preset = Object.keys(regexVariant)\n      .filter((k) => Object.create(regexVariant)[k])\n      .join('');\n    for (let i = 0; i < t.length; i++) {\n      const pattern = t[i];\n      if (pattern.length === 0) continue;\n      const re = new RegExp(pattern.replace(/(\\r\\n|\\n|\\r)/gim, ''), preset);\n      if (re.test(testValue)) {\n        setMatchingPattern(pattern);\n        return;\n      }\n    }\n    setMatchingPattern('No matching pattern');\n  };\n\n  const saveToFile = () => {\n    const e = document.createElement('a');\n    const f = new Blob([inputValue], { type: 'text/plain' });\n    e.href = URL.createObjectURL(f);\n    e.download = 'regexes.txt';\n    e.click();\n  };\n\n  React.useEffect(() => {}, [matchingPattern]);\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '100%',\n        display: 'inline-block',\n        clear: 'both',\n        paddingTop: '75px',\n        border: 0,\n      }}\n    >\n      <div\n        style={{\n          width: '48%',\n          float: 'left',\n          position: 'relative',\n          padding: '1%',\n        }}\n      >\n        <Typography variant=\"h5\">List of regexes</Typography>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Input regex\"\n          multiline\n          fullWidth\n          rows={12}\n          variant=\"outlined\"\n          color=\"primary\"\n          value={inputValue}\n          onChange={(input) => setInputValue(input.target.value)}\n          style={{\n            marginTop: 10,\n            marginBottom: 10,\n          }}\n        />\n        <Button variant=\"contained\" color=\"primary\" component=\"label\">\n          Upload regex file\n          <input\n            type=\"file\"\n            accept=\"text/plain\"\n            style={{ display: 'none' }}\n            onChange={(e) => setInput(e.target.files![0])}\n          />\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => setInputValue('')}\n        >\n          Clear regexes\n        </Button>\n        <Button variant=\"contained\" onClick={() => saveToFile()}>\n          Save into file\n        </Button>\n      </div>\n      <div\n        style={{\n          width: '48%',\n          float: 'left',\n          position: 'relative',\n          padding: '1%',\n        }}\n      >\n        <Typography variant=\"h5\">Test input</Typography>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Input text\"\n          multiline\n          fullWidth\n          rows={8}\n          variant=\"outlined\"\n          color=\"primary\"\n          value={testValue}\n          onChange={(input) => setTestValue(input.target.value)}\n          style={{\n            marginTop: 10,\n            marginBottom: 10,\n          }}\n        />\n\n        <div\n          style={{\n            width: '100%',\n            margin: '4px',\n          }}\n        >\n          <FormControlLabel\n            control={\n              <Switch\n                checked={regexVariant.i}\n                onChange={handleChange}\n                color=\"primary\"\n                name=\"i\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n              />\n            }\n            label=\"Insensitive (i)\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={regexVariant.g}\n                onChange={handleChange}\n                color=\"primary\"\n                name=\"g\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n              />\n            }\n            label=\"Global (g)\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={regexVariant.m}\n                onChange={handleChange}\n                color=\"primary\"\n                name=\"m\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n              />\n            }\n            label=\"Multi line (m)\"\n          />\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => checkRegexes()}\n          >\n            Test regex\n          </Button>\n        </div>\n        <div style={{ marginTop: '12px' }}>\n          <TextField\n            id=\"outlined-disabled\"\n            label=\"Matching pattern\"\n            value={matchingPattern}\n            variant=\"outlined\"\n            InputProps={{\n              readOnly: true,\n            }}\n            style={{ width: '100%' }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Main);\n","import React from 'react';\n\nimport TopBar from './components/TopBar';\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  Switch,\n  Tooltip,\n  CssBaseline,\n} from '@material-ui/core';\nimport Tester from './components/Main';\n\nconst DefaultApp = () => {\n  // Defaults the theme to dark theme\n  const [themeBool, setTheme] = React.useState(true);\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: themeBool ? 'dark' : 'light',\n        },\n      }),\n    [themeBool]\n  );\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTheme(!themeBool);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/* Added CssBaseline for body background to be dark */}\n      <CssBaseline />\n      <React.Fragment>\n        <TopBar>\n          <Tooltip title=\"Toggle light/dark mode\">\n            <Switch\n              checked={themeBool}\n              onChange={handleChange}\n              name=\"checkedTheme\"\n              color=\"primary\"\n            />\n          </Tooltip>\n        </TopBar>\n        <Tester />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n};\n\nexport default DefaultApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}